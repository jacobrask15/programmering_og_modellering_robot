class controller

--opg a)
types 
    public MOTORSTATE = <ON> | <OFF>;
    public DIRECTION = <UP> | <DOWN>;

instance variables
    public ctrl_q : real;
    public ctrl_motor_state: MOTORSTATE;
    public ctrl_motor_direction: DIRECTION;
    public target : real := 45;

values
    public M1 : real = 90;
    public M2 : real = 5;



operations
    
    public controller: () ==> controller
    controller() == (
        ctrl_q := 5;
        ctrl_motor_state := <OFF>;
        ctrl_motor_direction := <UP>;
    );

    -- -1 CClockwise / 1 Clockwise
    public setMotorState: (MOTORSTATE) ==> ()
    setMotorState(s) == duration(10) (
        ctrl_motor_state := s;
        MySystem`arm_env.setMotorState(s);
    ) pre s = <ON> or s = <OFF>; --states

    -- 0 off / 1 on
    public setMotorDirection: (DIRECTION) ==> ()
    setMotorDirection(dir) == duration(1E6) ( --1 ms
        ctrl_motor_direction := dir;
        MySystem`arm_env.setMotorDirection(dir);
    ) pre dir = <UP> or dir = <DOWN>; --states

    public get_env_angle :() ==> () 
    get_env_angle() == duration(0) ( -- duration is in sensor
        ctrl_q := MySystem`arm_sensor.get_sensor_q();
    );

    public set_target : (real) ==> () 
    set_target(t) == duration(0) (
        if (t < M1 and t > M2) then (target := t;)  
    )
    pre t<M1 and t>M2
    post target<M1 and target>M2;

    public moveToTarget :() ==> ()
    moveToTarget() == duration(0) (
        if (ctrl_q < target - MySystem`arm_env.AE) then (
            setMotorState(<ON>);
            setMotorDirection(<UP>); --Increase angle
        )
        else if (ctrl_q > target + MySystem`arm_env.AE) then (
            setMotorState(<ON>);
            setMotorDirection(<DOWN>); --Decrease angle
        )
        else (
            setMotorState(<OFF>); --stop motor
        )
    );

    private loop : () ==> ()
    loop() == duration(0) (
        get_env_angle();
        moveToTarget();
    );
    
    
    thread
        periodic(50,0,0,0)(loop);


end controller 