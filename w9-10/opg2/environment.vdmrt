class Environment

types
    public EVENT = <MOTORFAIL> 

values
    public g : real = -9.81; --gravity
    public Fc : real = 0.1; --friction factor
    public Fv : real = 0.05; --viscour factor
    public m : real = 1.2; --mass
    public r: real = 0.8; --arm length
    

instance variables
    public q' : real := 0;
    public env_last_q' : real := 0;
    public env_last_q : real := 0;
    public env_q : real := 0;
    private final_sim_time : real;
    public data_history : seq of (real * real * real * real); --time  q  q' q''
    public env_last_time : real;
    public q'' : real := 0;
    public inertia : real := m*r*r;
    public env_tau_g : real := 0;
    public env_tau_f : real := 0;
    public env_tau_m : real := 0;
    public events : seq of (real * EVENT);

operations
    
    public Environment: () ==> Environment
    Environment() == (
        final_sim_time := 0;
        data_history := [];
        env_last_time := 0;
    );

    public get_env_q : () ==> real
    get_env_q() == duration(0) (
        return env_q;
    );

    public AddEvent : real * EVENT ==> ()
    AddEvent(t,e) == duration(0) (
        events := events ^ [mk_(t,e)];
    );

    public setFinalSimulationTime : (real) ==> ()
    setFinalSimulationTime(t) == duration(0) (
        final_sim_time := t;
    );

    public CreateEvent : () ==> ()
    CreateEvent() ==  duration(0) (
        if len events > 0 then (
            let mk_(stime,event) = hd events
            in if stime < time then (
                skip;
            )
        );
    );  

    public isFinished : () ==> ()
    isFinished() == skip;

    public recordState : () ==> () 
    recordState() == duration(0) (
        data_history := data_history ^ [mk_(time/1E9 + 1,env_q,q',q'')];
    );


    public setMotorEnvTorque: (real) ==> ()
    setMotorEnvTorque(s) == duration(0) (
        env_tau_m := s;
    );


    private sign : (real) ==> (int)
    sign(x) == duration(0) (
        if (x < 0) then return -1;
        if (x >= 0) then return 1;    
        return 0;
    );


    public step: () ==> ()
    step() == duration(0) (
        dcl t : real := time/1E9 + 1; -- in seconds
        dcl delta : real := t - env_last_time;
        dcl rad : real := env_q*MATH`pi/180;
        env_last_time := t;

        env_tau_g := m * g * r * MATH`cos(rad);
        env_tau_f := Fc * sign(q') + Fv * q';
        
        --tau_m is calculated in controller
        q'' := (env_tau_m + env_tau_g - env_tau_f)/inertia;
        q' := env_last_q' + q''*delta;

        --update env_last_q'
        env_last_q' := q';
        env_q := env_last_q + q'*delta;

        --update env_last_q
       env_last_q := env_q;
       env_last_time := t;

       if (time mod 1E8 = 0) then recordState();
    );
    --post controller`M2 <= env_q and env_q <= controller`M1;

sync
    per isFinished => (time > final_sim_time);

thread
    periodic(1E7,0,0,0)(step); --10ms

end Environment 

