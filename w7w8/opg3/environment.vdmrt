class Environment

values
    q' : real = 10;
    
    public AE : real = 6.0;

--opg a)
types 
    public MOTERSTATE = <ON> | <OFF>;
    public DIRECTION = <UP> | <DOWN>;

instance variables
    public env_q : real;
    private final_sim_time : real;
    public env_motor_state: MOTERSTATE;
    public env_motor_direction: DIRECTION;
    public data_history : seq of (real * real * MOTERSTATE * DIRECTION ); --time  q  moter_state  motor_direction 
    public last_time : real;

operations
    
    public Environment: () ==> Environment
    Environment() == (
        env_q := 5;
        final_sim_time := 0;
        env_motor_state := <OFF>;
        env_motor_direction := <UP>;
        data_history := [];
        last_time := 0;
    );

    public get_env_q : () ==> real
    get_env_q() == duration(0) (
        return env_q;
    );

    public setFinalSimulationTime : (real) ==> ()
    setFinalSimulationTime(t) == duration(0) (
        final_sim_time := t;
    );

    public isFinished : () ==> ()
    isFinished() == skip;

    public recordState : () ==> () 
    recordState() == duration(0) (
        data_history := data_history ^ [mk_(time,env_q,env_motor_state,env_motor_direction)];
    );

    --hvad gÃ¸r jeg lige her nu??
    public step: () ==> ()
    step() == duration(0) (

        dcl t : real := time / 1E9; -- in seconds
        dcl delta : real := t - last_time;

        dcl ms : nat := 0;
        dcl md : int := -1;
        dcl qd : real := 0;

        last_time := delta;

        if (env_motor_state = <ON>) then (ms := 1);
        if (env_motor_direction = <UP>) then (md := 1);

        qd := ms*md*q'*delta; 
        env_q := qd + env_q;
        recordState();
    )
    post controller`M2 <= env_q and env_q <= controller`M1;

sync
    per isFinished => (time > final_sim_time);

thread
    periodic(1,0,0,0)(step);

end Environment 

