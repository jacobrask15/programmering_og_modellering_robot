class World
--M1 90 , target 45, q' = 10

types 
    public MOTORSTATE = <ON> | <OFF>;
    public DIRECTION = <UP> | <DOWN>;

instance variables
    io : IO := new IO();

operations 

    public echoInit : () ==> ()
    echoInit() == (
        dcl succ : bool;
        dcl str : seq of char := "";
        str := str ^ "Time";
        str := str ^ "\t \t";
        str := str ^ "Env_angle";
        str := str ^ "\t";
        str := str ^ "Env_Mstate";
        str := str ^ "\t";
        str := str ^ "Env_Mdir";
        str := str ^ "\t";
        str := str ^ "Ctrl_angle";
        str := str ^ "\t";
        str := str ^ "Ctrl_Mstate";
        str := str ^ "\t";
        str := str ^ "Ctrl_Mdir";
        str := str ^ "\n";
        succ :=  io.echo(str);
    );
    
    public echoState : (nat) ==> ()
    echoState(counter) == (
        dcl succ : bool;
        dcl str : seq of char := "";
        str := str ^ VDMUtil`val2seq_of_char[nat](counter);
        str := str ^ "\t \t";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`arm_env.env_q);
        str := str ^ "\t \t";
        str := str ^ VDMUtil`val2seq_of_char[MOTORSTATE](MySystem`arm_env.env_motor_state);
        str := str ^ "\t \t";
        str := str ^ VDMUtil`val2seq_of_char[DIRECTION](MySystem`arm_env.env_motor_direction);
        str := str ^ "\t \t";
        str := str ^ VDMUtil`val2seq_of_char[real](MySystem`arm_controller.ctrl_q);
        str := str ^ "\t \t";
        str := str ^ VDMUtil`val2seq_of_char[MOTORSTATE](MySystem`arm_controller.ctrl_motor_state);
        str := str ^ "\t \t";
        str := str ^ VDMUtil`val2seq_of_char[DIRECTION](MySystem`arm_controller.ctrl_motor_direction);
        str := str ^ "\n";
        succ :=  io.echo(str);
    );

    public Scenario5: () ==> bool
    Scenario5() == (
        --ideal scenario
        echoInit();
        echoState(0);
        MySystem`arm_controller.setMotorState(<ON>);
        MySystem`arm_controller.setMotorDirection(<UP>);
        MySystem`arm_env.step();
        echoState(5);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<DOWN>);
        MySystem`arm_env.step();
        echoState(16);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<UP>);
        MySystem`arm_env.step();
        echoState(23);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<DOWN>);
        MySystem`arm_env.step();
        echoState(31);
        MySystem`arm_controller.get_env_angle();
        echoState(32);
        return true;
    );

    public Scenario1: () ==> bool
    Scenario1() == (
        --ideal scenario
        echoInit();
        echoState(0);
        MySystem`arm_controller.setMotorState(<ON>);
        MySystem`arm_controller.setMotorDirection(<UP>);
        MySystem`arm_env.step();
        echoState(4);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorState(<OFF>);
        MySystem`arm_env.step();
        echoState(14);
        MySystem`arm_controller.get_env_angle();
        echoState(15);
        return true;
    );

    public Scenario2: () ==> bool
    Scenario2() == (
        -- unstable perfect scenario
        echoInit();
        echoState(0);
        MySystem`arm_controller.setMotorState(<ON>);
        MySystem`arm_controller.setMotorDirection(<UP>);
        MySystem`arm_env.step();
        echoState(2);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<DOWN>);
        MySystem`arm_env.step();
        echoState(7);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<UP>);
        MySystem`arm_env.step();
        echoState(16);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<DOWN>);
        MySystem`arm_env.step();
        echoState(30);
        MySystem`arm_controller.get_env_angle();
        return true;
    );

    public Scenario3: () ==> bool
    Scenario3() == (
        echoInit();
        echoState(0);
        MySystem`arm_controller.setMotorState(<ON>);
        MySystem`arm_controller.setMotorDirection(<UP>);
        MySystem`arm_env.step();
        echoState(5);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<DOWN>);
        MySystem`arm_env.step();
        echoState(7);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorDirection(<UP>);
        MySystem`arm_env.step();
        echoState(8);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.setMotorState(<OFF>);
        MySystem`arm_env.step();
        echoState(18);
        MySystem`arm_controller.get_env_angle();
        return true;
    );

    public Scenario4: () ==> bool
    Scenario4() == (
        -- underdamped oscillation scenario
        echoInit();
        echoState(0);
        for i = 0 to 7 do ( 
            MySystem`arm_controller.setMotorState(<ON>);
            MySystem`arm_env.step();
            MySystem`arm_controller.setMotorDirection(<DOWN>);
            echoState(i*2);
            MySystem`arm_controller.get_env_angle();
        );
        return true;
    );

    public Scenario6: () ==> bool
    Scenario6() == (
    echoInit();

    -- 
    for i = 0 to 7 do ( 
        echoState(i);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.moveToTarget();
        MySystem`arm_env.step();
        );

    return true;
    );

    public Scenario7: () ==> bool
    Scenario7() == (
    echoInit();

    
    -- 
    for i = 0 to 10 do ( 
        echoState(i);
        MySystem`arm_controller.get_env_angle();
        MySystem`arm_controller.moveToTarget();
        MySystem`arm_env.step();
        );

    return true;
    );


    public RunScenario1 : () ==> (seq of (real * real * MOTORSTATE * DIRECTION ))
    RunScenario1() == (
        MySystem`arm_env.setFinalSimulationTime(2E9);
        start(MySystem`arm_env);
        start(MySystem`arm_controller);
        start(MySystem`arm_sensor);
        MySystem`arm_env.isFinished();
        return MySystem`arm_env.data_history;
    );

end World