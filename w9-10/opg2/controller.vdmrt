class controller

types 
    public MODES = <INIT> | <NORMAL> | <EMERGENCY>;


instance variables
    public ctrl_q : real := GLOBAL`INITIAL_ANGLE;
    public target : real := GLOBAL`TARGET;
    public ctrl_last_q : real := GLOBAL`INITIAL_ANGLE;
    public e : real;
    public last_e : real;
    public ctrl_last_t : real := 0;
    public ctrl_mode : MODES;
    public i_target : real := 0;

values
    public M1 : real = GLOBAL`HARD_UPPER;
    public M2 : real = GLOBAL`HARD_LOWER;
    public Kp : real = 3; --to be calculated
    public Kd : real = 1; -- to be calculated
    public N1 : real = GLOBAL`SOFT_UPPER;
    public N2 : real = GLOBAL`HARD_LOWER;
    

operations
    public controller: () ==> controller
    controller() == (
        --ctrl_q := 89;
        e := target - ctrl_q;
        last_e := target - ctrl_q;
        ctrl_mode := <INIT>;
    );

    public get_env_angle :() ==> () 
    get_env_angle() == duration(0) ( -- duration is in sensor
        ctrl_q := MySystem`arm_sensor.get_sensor_q();
    );

    public set_target : (real) ==> () 
    set_target(t) == duration(0) (
        if (t < M1 and t > M2) then (i_target := t;)  
    )
    pre t<M1 and t>M2
    post i_target<M1 and i_target>M2;

    public regulate :() ==> ()
    regulate() == duration(0) (

        -- error calculations
        dcl time_now : real := time/1E9;
        dcl dt : real;
        dcl e' : real;
        dcl tau_m : real;
        e := target - ctrl_last_q;
        ctrl_last_q := ctrl_q;
        dt := time_now - ctrl_last_t;
        ctrl_last_t := time_now;
        e' := (e - last_e)/dt;
        last_e := e;

        -- torque regulation calculations
        tau_m := Kp*e + Kd*e';
        MySystem`arm_motor.setMotorTorque(tau_m);
    );

    public ctrlMode : () ==> ()
    ctrlMode() == duration(0) (

        if ctrl_mode = <INIT> then target := (N1+N2)/2; 
        if ctrl_mode = <INIT> and (ctrl_q > M1 or ctrl_q < M2) then ctrl_mode := <EMERGENCY>; 
        if ctrl_mode = <INIT> and ctrl_q < N1 and ctrl_q > N2 then ctrl_mode := <NORMAL>; 


        if ctrl_mode = <NORMAL> then target := i_target; 
        if ctrl_mode = <NORMAL> and (ctrl_q > M1  or ctrl_q < M2) then ctrl_mode := <EMERGENCY>; 
        
        if ctrl_mode = <EMERGENCY> then MySystem`arm_motor.MotorOff();
    );

    private loop : () ==> ()
    loop() == duration(0) (
        get_env_angle(); -- 1 ms
        ctrlMode();
        regulate();
    );
    

    
    thread
        periodic(GLOBAL`PERIOD,0,0,0)(loop); -- 10ms


end controller 